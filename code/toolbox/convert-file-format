#!/usr/bin/env python

import os
import sys
import logging

# classes
from skyhookdm_singlecell.util import ArgparseBuilder
from skyhookdm_singlecell.datatypes import GeneExpression
from skyhookdm_singlecell.dataformats import (SkyhookGeneExpression,
                                              SkyhookFlatbufferWriter)


# Set-up logger
stdout_handler = logging.StreamHandler(sys.stdout)
stdout_handler.setFormatter(logging.Formatter(
    fmt='{levelname} <{name} | {asctime} ~> {message}',
    style='{'
))

logger = logging.getLogger('toolbox.convert-file-format')
logger.setLevel(logging.DEBUG)
logger.addHandler(stdout_handler)

debug = False

# ------------------------------
# Parse command-line arguments first
parsed_args, parsed_extra_args = (
    ArgparseBuilder.with_description('Program for converting between specialized file formats')
                   .add_input_dir_arg(
                         required=True
                        ,help_str='Path to root directory of gene expression in MTX format'
                    )
                   .add_input_metadata_file_arg(
                         required=False
                        ,help_str='Path to file containing metadata'
                    )
                   .add_data_format_arg(required=False)
                   .add_batch_args(
                         required=False
                        ,help_str='Number of records to batch together in output file'
                    )
                   .add_output_file_arg(
                         required=False
                        ,help_str='Path to file to write serialized data'
                    )
                   .add_output_file_format_arg(
                         required=True
                        ,help_str='File format for output files. Supports: "flatbuffer" | "parquet" | "arrow"'
                    )
                   .add_output_dir_arg(
                         required=False
                        ,help_str='Path to directory to write partitioned data in parquet format'
                    )
                   .add_flatbuffer_flag_arg(required=True)
                   .parse_args()
)


# ------------------------------
if __name__ == '__main__':
    logger.debug('Parsed command-line arguments:\n{}'.format(
        '\n'.join([
            f'{arg_name}\t\t: {arg_val}'
            for arg_name, arg_val in vars(parsed_args).items()
        ])
    ))


    if parsed_args.data_format not in ('arrow'):
        error_msg = f'xxx Unsupported data format: {parsed_args.data_format}'
        logger.error(error_msg)
        sys.exit(error_msg)

    if os.path.isdir(parsed_args.input_dir):
        logger.info('>>> parsing gene expression')

        gene_expr = GeneExpression.from_mtx(parsed_args.input_dir)

        if debug:
            logger.debug('--- subsampling data to 100 genes and 20 cells')
            gene_expr.subsample_by_counts(gene_count=100, cell_count=20)

        logger.info('--- normalizing gene expression')
        gene_expr.normalize_expression()

        logger.debug('--- gene expression shape: {}'.format(gene_expr.expression.shape))
        sample = gene_expr.expression[:3]

        try:
            logger.debug(sample[sample > 0])

        except Exception:
            logger.debug(f'Malformatted attempt to print non-zeros.\nsample: {sample}')

        logger.info('<<< gene expression parsed')

    if parsed_args.output_dir is not None:
        logger.info('>>> serializing cell expression')

        if not os.path.isdir(parsed_args.output_dir):
            os.makedirs(parsed_args.output_dir)

        if parsed_args.output_file_format == 'arrow':
            logger.info('--- writing in arrow binary format')
            GeneExpressionArrowWriter.write_cells_as_arrow(
                gene_expr, parsed_args.output_dir, parsed_args.batch_size
            )

        elif parsed_args.output_file_format == 'parquet':
            logger.info('--- writing in parquet binary format')
            GeneExpressionParquetWriter.write_cells_as_parquet(
                gene_expr, parsed_args.output_dir, parsed_args.batch_size
            )

        elif parsed_args.output_file_format == 'flatbuffer':
            logger.info('--- writing to flatbuffer binary file')

            # Place into a flatbuffer structure in specified data format
            if parsed_args.flag_use_wrapper and parsed_args.data_format == 'arrow':
                logger.info('--- serializing data in wrapped arrow format')
                skyhook_blob = SkyhookFlatbufferWriter.wrapped_arrow_buffer(
                    gene_expr, parsed_args.output_dir, parsed_args.batch_size
                )

            elif not parsed_args.flag_use_wrapper and parsed_args.data_format == 'arrow':
                logger.info('--- serializing data in skyhook arrow format')
                skyhook_blob = SkyhookFlatbufferWriter.tabular_arrow_buffer(
                    gene_expr, parsed_args.output_dir, parsed_args.batch_size
                )

        else:
            logger.error(f'Unknown file format: {parsed_args.output_file_format}')

        logger.info('<<< cell expression serialized')
    
    if parsed_args.output_file is not None:
        if os.path.isfile(parsed_args.output_file):
            err_msg = 'Serialized file already exists. Finishing...'
            logger.error(err_msg)
            sys.exit(err_msg)

        if parsed_args.output_file.endswith('arrow'):
            GeneExpressionArrowWriter.write_data_as_arrow(gene_expr, parsed_args.output_file)

        elif parsed_args.output_file.endswith('parquet'):
            GeneExpressionParquetWriter.write_data_as_parquet(gene_expr, parsed_args.output_file)
