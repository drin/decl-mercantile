#!/usr/bin/env python

import os
import sys
import logging

# classes
from skyhookdm_singlecell.util import ArgparseBuilder
from skyhookdm_singlecell.datatypes import GeneExpression
from skyhookdm_singlecell.dataformats import SkyhookSerializerGeneExpression
from skyhookdm_singlecell.serialization import SkyhookFlatbufferGeneExpression


# Set-up logger
stdout_handler = logging.StreamHandler(sys.stdout)
stdout_handler.setFormatter(logging.Formatter(
    fmt='{levelname} <{name} | {asctime} ~> {message}',
    style='{'
))

logger = logging.getLogger('toolbox.convert-file-format')
logger.setLevel(logging.DEBUG)
logger.addHandler(stdout_handler)

debug = False

# ------------------------------
# Parse command-line arguments first
parsed_args, parsed_extra_args = (
    ArgparseBuilder.with_description('Program for converting between specialized file formats')
                   .add_input_dir_arg(
                         required=True
                        ,help_str='Path to root directory of gene expression in MTX format'
                    )
                   .add_input_metadata_file_arg(
                         required=False
                        ,help_str='Path to file containing metadata'
                    )
                   .add_batch_args(
                         required=False
                        ,help_str='Number of records to batch together in output file'
                    )
                   .add_output_file_arg(
                         required=False
                        ,help_str='Path to file to write serialized data'
                    )
                   .add_output_file_format_arg(
                         required=True
                        ,help_str='File format for output files. Supports: "parquet" | "arrow"'
                    )
                   .add_output_dir_arg(
                         required=False
                        ,help_str='Path to directory to write partitioned data in parquet format'
                    )
                   .add_flatbuffer_flag_arg(required=True)
                   .parse_args()
)


# ------------------------------
if __name__ == '__main__':
    logger.debug('Parsed command-line arguments:\n{}'.format(
        '\n'.join([
            f'{arg_name}\t\t: {arg_val}'
            for arg_name, arg_val in vars(parsed_args).items()
        ])
    ))

    if os.path.isdir(parsed_args.input_dir):
        logger.info('>>> parsing gene expression')

        gene_expr = GeneExpression.from_mtx(parsed_args.input_dir)

        if debug:
            logger.debug('--- subsampling data to 100 genes and 20 cells')
            gene_expr.subsample_by_counts(gene_count=100, cell_count=20)

        logger.info('--- normalizing gene expression')
        gene_expr.normalize_expression()

        logger.debug('--- gene expression shape: {}'.format(gene_expr.expression.shape))
        sample = gene_expr.expression[:3]

        try:
            logger.debug(sample[sample > 0])

        except Exception:
            logger.debug(f'Malformatted attempt to print non-zeros.\nsample: {sample}')

        logger.info('<<< gene expression parsed')

    if parsed_args.output_dir is not None:
        logger.info('>>> serializing cell expression')

        if not os.path.isdir(parsed_args.output_dir):
            os.makedirs(parsed_args.output_dir)

        serializer = SkyhookSerializerGeneExpression(gene_expr)

        batch_sizes = [1000, 10000]
        if parsed_args.batch_size is not None:
            batch_sizes = [parsed_args.batch_size]

        for batch_size in batch_sizes:
            logger.info(f'--- Using batch size: {batch_size}')

            if parsed_args.flag_use_wrapper:
                logger.info('--- serializing to skyhook flatbuffer')

                for batch_id, expr_table in serializer.cell_expression_batched(batch_size):
                    arrow_buffer = serializer.serialize_as_sft_arrow(expr_table)
                    skyhook_blob = SkyhookFlatbufferGeneExpression.from_arrow_buffer(arrow_buffer)

                    path_to_blob = os.path.join(
                        parsed_args.output_dir,
                        '{}-{}-{}.skyhook-blob'.format(
                            batch_id, expr_table.num_columns, expr_table.column_names[0]
                        )
                    )

                    with open(path_to_blob, 'wb') as blob_handle:
                        blob_handle.write(skyhook_blob)

            elif parsed_args.output_file_format == 'parquet':
                logger.info('--- serializing in parquet format')
                serializer.write_cells_as_parquet(parsed_args.output_dir, batch_size)

            elif parsed_args.output_file_format == 'arrow':
                logger.info('--- serializing in arrow format')
                serializer.write_cells_as_arrow(parsed_args.output_dir, batch_size)

            else:
                logger.error(f'Unknown file format: {parsed_args.output_file_format}')

        logger.info('<<< cell expression serialized')

    
    if parsed_args.output_file is not None:
        if not os.path.isfile(parsed_args.output_file):
            logger.info('>>> serializing data')

            serializer = SkyhookSerializerGeneExpression(gene_expr)

            if parsed_args.output_file.endswith('arrow'):
                serializer.write_data_as_arrow(
                    parsed_args.batch_size,
                    parsed_args.batch_offset,
                    parsed_args.output_file
                )

                logger.info('<<< data serialized in Arrow format')

            elif parsed_args.output_file.endswith('parquet'):
                serializer.write_data_as_parquet(parsed_args.output_file)

                logger.info('<<< data serialized in parquet format')
