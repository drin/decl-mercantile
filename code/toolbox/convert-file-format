#!/usr/bin/env python

import os
import sys
import logging

# classes
from skyhookdm_singlecell.util import ArgparseBuilder
from skyhookdm_singlecell.datatypes import GeneExpression
from skyhookdm_singlecell.dataformats import SkyhookSerializerGeneExpression


# Set-up logger
logger = logging.getLogger('toolbox.convert-file-format')
logger.setLevel(logging.INFO)
logger.addHandler(logging.StreamHandler(sys.stdout))


# ------------------------------
# Parse command-line arguments first
parsed_args, parsed_extra_args = (
    ArgparseBuilder.with_description('Program for converting between specialized file formats')
                   .add_input_dir_arg(
                         required=True
                        ,help_str='Path to root directory of gene expression in MTX format'
                    )
                   .add_input_metadata_file_arg(
                         required=False
                        ,help_str='Path to file containing metadata'
                    )
                   .add_batch_args(
                         required=True
                        ,help_str='Number of records to batch together in output file'
                    )
                   .add_output_file_arg(
                         required=True
                        ,help_str='Path to the file resulting from the conversion'
                    )
                   .parse_args()
)


# ------------------------------
if __name__ == '__main__':
    logging.debug('Parsed command-line arguments: {}'.format(parsed_args))


    if os.path.isdir(parsed_args.input_dir):
        logging.info('>>> parsing gene expression')

        gene_expr = (
            GeneExpression.from_mtx(parsed_args.input_dir)
                          .subsample_by_counts(gene_count=100, cell_count=20)
                          .normalize_expression()
        )

        logging.debug('GeneExpression shape: {}'.format(gene_expr.expression.shape))
        logging.debug(gene_expr.expression[:3])

        logging.info('<<< gene expression parsed')

    if not os.path.isfile(parsed_args.output_file):
        logging.info('>>> serializing data in Arrow format')

        serializer = SkyhookSerializerGeneExpression(gene_expr)
        serializer.write_data_as_arrow(
            parsed_args.batch_size,
            parsed_args.batch_offset,
            parsed_args.output_file
        )

        logging.info('<<< data serialized in Arrow format')
