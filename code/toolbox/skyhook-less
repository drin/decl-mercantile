#!/usr/bin/env python

import os
import sys
import logging

import pyarrow

from skyhookdm_singlecell.util import ArgparseBuilder
from skyhookdm_singlecell.skyhook import FormatTypes
from skyhookdm_singlecell.dataformats import (SkyhookFlatbufferTable,
                                              SkyhookFlatbufferMeta)

# ------------------------------
# Parse command-line arguments first
parsed_args, parsed_extra_args = (
    ArgparseBuilder.with_description('Program for inspecting data in serialized arrow files')
                   .add_input_file_arg(
                         required=True
                        ,help_str='Path to arrow file (assumed to be gene expression)'
                    )
                   .parse_args()
)

# Bootstrap logger
logger = logging.getLogger('toolbox.skyhook-less')
logger.addHandler(logging.StreamHandler(sys.stdout))
logger.setLevel(logging.INFO)

# ------------------------------
if __name__ == '__main__':
    if os.path.isfile(parsed_args.input_file):
        with open(parsed_args.input_file, 'rb') as input_handle:
            binary_data = bytearray(input_handle.read())

            logger.info('Parsing binary data into Tables.FB_Meta')
            skyhook_flatbuffer = SkyhookFlatbufferMeta.from_binary(binary_data)

        print(f'Blob data format: {FormatTypes.from_value(skyhook_flatbuffer.get_data_format())}')
        if skyhook_flatbuffer.get_data_format() == FormatTypes.SFT_ARROW:
            print('ARROW format')

            print(f'Reading {skyhook_flatbuffer.get_size()} bytes')

            data_table = skyhook_flatbuffer.get_data_as_arrow()
            print(f'Table shape: {data_table.shape}')

        elif skyhook_flatbuffer.get_data_format() == FormatTypes.SFT_JSON:
            print('JSON format')

        elif skyhook_flatbuffer.get_data_format() == FormatTypes.SFT_CSV:
            print('CSV format')

        elif skyhook_flatbuffer.get_data_format() is None:
            print('Data format not defined')

        if data_table is None:
            err_msg = f'Unable to process data in file: {parsed_args.input_file}'
            print(err_msg)
            sys.exit(err_msg)

        print(data_table.schema)
        print(data_table.to_pandas())
        print(len(data_table.schema.metadata['METADATA_DATA_SCHEMA'.encode('utf-8')]))
