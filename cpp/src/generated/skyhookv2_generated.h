// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SKYHOOKV2_TABLES_H_
#define FLATBUFFERS_GENERATED_SKYHOOKV2_TABLES_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"

namespace Tables {

struct Table;
struct TableBuilder;

struct Record;
struct RecordBuilder;

struct Table FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA_FORMAT_TYPE = 4,
    VT_SKYHOOK_VERSION = 6,
    VT_DATA_STRUCTURE_VERSION = 8,
    VT_DATA_SCHEMA_VERSION = 10,
    VT_DATA_SCHEMA = 12,
    VT_DB_SCHEMA = 14,
    VT_TABLE_NAME = 16,
    VT_DELETE_VECTOR = 18,
    VT_ROWS = 20,
    VT_NROWS = 22
  };
  int32_t data_format_type() const {
    return GetField<int32_t>(VT_DATA_FORMAT_TYPE, 0);
  }
  int32_t skyhook_version() const {
    return GetField<int32_t>(VT_SKYHOOK_VERSION, 0);
  }
  int32_t data_structure_version() const {
    return GetField<int32_t>(VT_DATA_STRUCTURE_VERSION, 0);
  }
  int32_t data_schema_version() const {
    return GetField<int32_t>(VT_DATA_SCHEMA_VERSION, 0);
  }
  const flatbuffers::String *data_schema() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA_SCHEMA);
  }
  const flatbuffers::String *db_schema() const {
    return GetPointer<const flatbuffers::String *>(VT_DB_SCHEMA);
  }
  const flatbuffers::String *table_name() const {
    return GetPointer<const flatbuffers::String *>(VT_TABLE_NAME);
  }
  const flatbuffers::Vector<uint8_t> *delete_vector() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DELETE_VECTOR);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Tables::Record>> *rows() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Tables::Record>> *>(VT_ROWS);
  }
  uint32_t nrows() const {
    return GetField<uint32_t>(VT_NROWS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DATA_FORMAT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_SKYHOOK_VERSION) &&
           VerifyField<int32_t>(verifier, VT_DATA_STRUCTURE_VERSION) &&
           VerifyField<int32_t>(verifier, VT_DATA_SCHEMA_VERSION) &&
           VerifyOffset(verifier, VT_DATA_SCHEMA) &&
           verifier.VerifyString(data_schema()) &&
           VerifyOffset(verifier, VT_DB_SCHEMA) &&
           verifier.VerifyString(db_schema()) &&
           VerifyOffset(verifier, VT_TABLE_NAME) &&
           verifier.VerifyString(table_name()) &&
           VerifyOffset(verifier, VT_DELETE_VECTOR) &&
           verifier.VerifyVector(delete_vector()) &&
           VerifyOffset(verifier, VT_ROWS) &&
           verifier.VerifyVector(rows()) &&
           verifier.VerifyVectorOfTables(rows()) &&
           VerifyField<uint32_t>(verifier, VT_NROWS) &&
           verifier.EndTable();
  }
};

struct TableBuilder {
  typedef Table Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data_format_type(int32_t data_format_type) {
    fbb_.AddElement<int32_t>(Table::VT_DATA_FORMAT_TYPE, data_format_type, 0);
  }
  void add_skyhook_version(int32_t skyhook_version) {
    fbb_.AddElement<int32_t>(Table::VT_SKYHOOK_VERSION, skyhook_version, 0);
  }
  void add_data_structure_version(int32_t data_structure_version) {
    fbb_.AddElement<int32_t>(Table::VT_DATA_STRUCTURE_VERSION, data_structure_version, 0);
  }
  void add_data_schema_version(int32_t data_schema_version) {
    fbb_.AddElement<int32_t>(Table::VT_DATA_SCHEMA_VERSION, data_schema_version, 0);
  }
  void add_data_schema(flatbuffers::Offset<flatbuffers::String> data_schema) {
    fbb_.AddOffset(Table::VT_DATA_SCHEMA, data_schema);
  }
  void add_db_schema(flatbuffers::Offset<flatbuffers::String> db_schema) {
    fbb_.AddOffset(Table::VT_DB_SCHEMA, db_schema);
  }
  void add_table_name(flatbuffers::Offset<flatbuffers::String> table_name) {
    fbb_.AddOffset(Table::VT_TABLE_NAME, table_name);
  }
  void add_delete_vector(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> delete_vector) {
    fbb_.AddOffset(Table::VT_DELETE_VECTOR, delete_vector);
  }
  void add_rows(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Tables::Record>>> rows) {
    fbb_.AddOffset(Table::VT_ROWS, rows);
  }
  void add_nrows(uint32_t nrows) {
    fbb_.AddElement<uint32_t>(Table::VT_NROWS, nrows, 0);
  }
  explicit TableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TableBuilder &operator=(const TableBuilder &);
  flatbuffers::Offset<Table> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Table>(end);
    return o;
  }
};

inline flatbuffers::Offset<Table> CreateTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t data_format_type = 0,
    int32_t skyhook_version = 0,
    int32_t data_structure_version = 0,
    int32_t data_schema_version = 0,
    flatbuffers::Offset<flatbuffers::String> data_schema = 0,
    flatbuffers::Offset<flatbuffers::String> db_schema = 0,
    flatbuffers::Offset<flatbuffers::String> table_name = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> delete_vector = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Tables::Record>>> rows = 0,
    uint32_t nrows = 0) {
  TableBuilder builder_(_fbb);
  builder_.add_nrows(nrows);
  builder_.add_rows(rows);
  builder_.add_delete_vector(delete_vector);
  builder_.add_table_name(table_name);
  builder_.add_db_schema(db_schema);
  builder_.add_data_schema(data_schema);
  builder_.add_data_schema_version(data_schema_version);
  builder_.add_data_structure_version(data_structure_version);
  builder_.add_skyhook_version(skyhook_version);
  builder_.add_data_format_type(data_format_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Table> CreateTableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t data_format_type = 0,
    int32_t skyhook_version = 0,
    int32_t data_structure_version = 0,
    int32_t data_schema_version = 0,
    const char *data_schema = nullptr,
    const char *db_schema = nullptr,
    const char *table_name = nullptr,
    const std::vector<uint8_t> *delete_vector = nullptr,
    const std::vector<flatbuffers::Offset<Tables::Record>> *rows = nullptr,
    uint32_t nrows = 0) {
  auto data_schema__ = data_schema ? _fbb.CreateString(data_schema) : 0;
  auto db_schema__ = db_schema ? _fbb.CreateString(db_schema) : 0;
  auto table_name__ = table_name ? _fbb.CreateString(table_name) : 0;
  auto delete_vector__ = delete_vector ? _fbb.CreateVector<uint8_t>(*delete_vector) : 0;
  auto rows__ = rows ? _fbb.CreateVector<flatbuffers::Offset<Tables::Record>>(*rows) : 0;
  return Tables::CreateTable(
      _fbb,
      data_format_type,
      skyhook_version,
      data_structure_version,
      data_schema_version,
      data_schema__,
      db_schema__,
      table_name__,
      delete_vector__,
      rows__,
      nrows);
}

struct Record FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RecordBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RID = 4,
    VT_NULLBITS = 6,
    VT_DATA = 8
  };
  uint64_t RID() const {
    return GetField<uint64_t>(VT_RID, 0);
  }
  const flatbuffers::Vector<uint64_t> *nullbits() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_NULLBITS);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  flexbuffers::Reference data_flexbuffer_root() const {
    return flexbuffers::GetRoot(data()->Data(), data()->size());
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_RID) &&
           VerifyOffset(verifier, VT_NULLBITS) &&
           verifier.VerifyVector(nullbits()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct RecordBuilder {
  typedef Record Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_RID(uint64_t RID) {
    fbb_.AddElement<uint64_t>(Record::VT_RID, RID, 0);
  }
  void add_nullbits(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> nullbits) {
    fbb_.AddOffset(Record::VT_NULLBITS, nullbits);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Record::VT_DATA, data);
  }
  explicit RecordBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RecordBuilder &operator=(const RecordBuilder &);
  flatbuffers::Offset<Record> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Record>(end);
    return o;
  }
};

inline flatbuffers::Offset<Record> CreateRecord(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t RID = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> nullbits = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  RecordBuilder builder_(_fbb);
  builder_.add_RID(RID);
  builder_.add_data(data);
  builder_.add_nullbits(nullbits);
  return builder_.Finish();
}

inline flatbuffers::Offset<Record> CreateRecordDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t RID = 0,
    const std::vector<uint64_t> *nullbits = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  auto nullbits__ = nullbits ? _fbb.CreateVector<uint64_t>(*nullbits) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return Tables::CreateRecord(
      _fbb,
      RID,
      nullbits__,
      data__);
}

inline const Tables::Table *GetTable(const void *buf) {
  return flatbuffers::GetRoot<Tables::Table>(buf);
}

inline const Tables::Table *GetSizePrefixedTable(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Tables::Table>(buf);
}

inline bool VerifyTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Tables::Table>(nullptr);
}

inline bool VerifySizePrefixedTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Tables::Table>(nullptr);
}

inline void FinishTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::Table> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::Table> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Tables

#endif  // FLATBUFFERS_GENERATED_SKYHOOKV2_TABLES_H_
